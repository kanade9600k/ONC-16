// Hello Worldを表示するプログラム
// r1: UARTステータスアドレス, r2: UARTデータアドレス, r3: ステータスデータ r4: 送信データ
6081 // LDHI r1, 0x08: r1に0x0800をロード 0x0000
0312 // MOV r2, r1: r2に0x0800を転送
1012 // ADDIU r2, 1: r2に0x0001を加算
0413 // LD r3, r1: r3にr1のアドレス内の値をロード
8013 // ANDI r3, 1: r3と1のビット積
0E03 // CMP r3, 0: r3の最下位ビットが0かを判定
F1FC // BEQI -4: 0ならステータスデータを再度ロード
4484 // LDIU r4 0x48("H"): 1ならHを送信 0x0007
0524 // ST r4, r2: 送信データをUARTデータアドレスにストア
0413 // LD r3, r1: r3にr1のアドレス内の値をロード 0x0009
8013 // ANDI r3, 1: r3と1のビット積
0E03 // CMP r3, 0: r3の最下位ビットが0かを判定
F1FC // BEQI -4: 0ならステータスデータを再度ロード 0x000C
4654 // LDIU r4 0x65("e"): 1ならeを送信 0x000D
0524 // ST r4, r2: 送信データをUARTデータアドレスにストア
0413 // LD r3, r1: r3にr1のアドレス内の値をロード
8013 // ANDI r3, 1: r3と1のビット積 0x0010
0E03 // CMP r3, 0: r3の最下位ビットが0かを判定
F1FC // BEQI -4: 0ならステータスデータを再度ロード
46C4 // LDIU r4 0x6C("l"): 1ならlを送信
0524 // ST r4, r2: 送信データをUARTデータアドレスにストア
0413 // LD r3, r1: r3にr1のアドレス内の値をロード
8013 // ANDI r3, 1: r3と1のビット積
0E03 // CMP r3, 0: r3の最下位ビットが0かを判定
F1FC // BEQI -4: 0ならステータスデータを再度ロード
46C4 // LDIU r4 0x6C("l"): 1ならlを送信
0524 // ST r4, r2: 送信データをUARTデータアドレスにストア
0413 // LD r3, r1: r3にr1のアドレス内の値をロード
8013 // ANDI r3, 1: r3と1のビット積
0E03 // CMP r3, 0: r3の最下位ビットが0かを判定
F1FC // BEQI -4: 0ならステータスデータを再度ロード
46F4 // LDIU r4 0x6F("o"): 1ならoを送信
0524 // ST r4, r2: 送信データをUARTデータアドレスにストア 0x0020
0413 // LD r3, r1: r3にr1のアドレス内の値をロード
8013 // ANDI r3, 1: r3と1のビット積
0E03 // CMP r3, 0: r3の最下位ビットが0かを判定
F1FC // BEQI -4: 0ならステータスデータを再度ロード
4204 // LDIU r4 0x20("␣"): 1なら␣を送信
0524 // ST r4, r2: 送信データをUARTデータアドレスにストア
0413 // LD r3, r1: r3にr1のアドレス内の値をロード
8013 // ANDI r3, 1: r3と1のビット積
0E03 // CMP r3, 0: r3の最下位ビットが0かを判定
F1FC // BEQI -4: 0ならステータスデータを再度ロード
4004 // LDIU r4 0x00("\0"): 1ならNULL文字を送信
0524 // ST r4, r2: 送信データをUARTデータアドレスにストア
F0D2 // BALI -1: 終了
